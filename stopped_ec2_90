import boto3
from datetime import datetime, timedelta, timezone
import csv

# Initialize a session using AWS credentials
aws_con = boto3.session.Session(profile_name="profile")
ec2_client = aws_con.client('ec2', region_name='us-east-1')  # Change the region if needed

# Get all available regions
regions_response = ec2_client.describe_regions()
regions = [region['RegionName'] for region in regions_response['Regions']]

# Get the current time in UTC using timezone-aware datetime
current_time = datetime.now(timezone.utc)
print(current_time)

# Prepare the header with instance attributes and unique tag keys
header = [
    "Region", "InstanceId", "InstanceType", "Instance_State", "LaunchTime", "PrivateIpAddress", "State_Transition", "Report_RunTime", "Time_Since_Last_Started"
]

# Query EC2 instances that are in the "stopped" state
stopped_filter = {'Name': 'instance-state-name', 'Values': ['stopped']}

# Re-initialize the CSV file
with open(
        'instances_stopped_90days.csv',
        mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(header)  # Write the header row

    # Second pass to write instance details
    for region in regions:
        ec2_cli = aws_con.client("ec2", region_name=region)
        paginator = ec2_cli.get_paginator('describe_instances')

        # Loop through all reservations and instances
        for page in paginator.paginate(Filters=[stopped_filter]):
            for reservation in page['Reservations']:
                for instance in reservation['Instances']:
                    instance_id = instance['InstanceId']
                    state_transition_reason = instance.get('StateTransitionReason', '')


                    # The state transition reason will look like: "User initiated (yyyy-mm-dd hh:mm:ss GMT)"
                    # Extract the stop time from the reason string
                    if state_transition_reason:
                        try:
                            stop_time_str = state_transition_reason.split('(')[-1].strip(')')  # Extract time inside parentheses
                            stop_time = datetime.strptime(stop_time_str, "%Y-%m-%d %H:%M:%S GMT")

                            # Make stop_time format the same UTC format as current time
                            print("Before stop time", stop_time)
                            stop_time = stop_time.replace(tzinfo=timezone.utc)

                            # Calculate how long the instance has been stopped
                            time_diff = current_time - stop_time
                            # Make time_diff more readable
                            days = time_diff.days
                            hours, remainder = divmod(time_diff.seconds, 3600)
                            minutes, seconds = divmod(remainder, 60)
                            readable_time_diff = f"{days} days, {hours} hours, {minutes} minutes"

                            if time_diff >= timedelta(days=90):  # 90 days in timedelta
                                row = [
                                    region,
                                    instance["InstanceId"],
                                    instance["InstanceType"],
                                    instance["State"]["Name"],
                                    instance["LaunchTime"].strftime('%Y-%m-%d %H:%M:%S'),  # Formatting LaunchTime
                                    instance.get("PrivateIpAddress", ""),
                                    state_transition_reason,
                                    current_time.strftime('%Y-%m-%d %H:%M:%S'),
                                    readable_time_diff
                                ]
                                writer.writerow(row)
                                # print(
                                #     f"Instance {instance_id} has been stopped for more than 90 days (Stopped on {stop_time_str})")
                        except ValueError:
                            # If we can't parse the time, we'll skip this instance
                            print(f"Error parsing stop time for instance {instance_id}")

print("CSV file 'instances_stopped_90days.csv' created successfully.")
